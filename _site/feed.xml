<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-06T17:07:23-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Fabrício Masiero iOS Engineer</title><subtitle>Swift Daily</subtitle><entry><title type="html">WWDC or AltConf?</title><link href="http://localhost:4000/ios/talks/swift/xcode/wwdc/altconf/2020/03/11/wwdc-or-altconf/" rel="alternate" type="text/html" title="WWDC or AltConf?" /><published>2020-03-11T00:00:00-03:00</published><updated>2020-03-11T00:00:00-03:00</updated><id>http://localhost:4000/ios/talks/swift/xcode/wwdc/altconf/2020/03/11/wwdc-or-altconf</id><content type="html" xml:base="http://localhost:4000/ios/talks/swift/xcode/wwdc/altconf/2020/03/11/wwdc-or-altconf/">&lt;p&gt;&lt;img src=&quot;/Images/2020-03-11-wwdc-or-altconf/moscone-center.jpeg&quot; alt=&quot;Moscone Center at WWDC 2016 San Francisco&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, I would like to introduce myself, I am Fabrício Masiero, I have been working with iOS for over 8 years and today I lead a team in the largest education company in Brazil.&lt;/p&gt;

&lt;p&gt;Why is presentation important? Because it can help you choose the ideal event. I will explain it throughout the text.&lt;/p&gt;

&lt;p&gt;Every iOS Developer dreams of going to one of these events and I will share my experiences in each one.
My first event was in 2016, the last year at the Moscone Center — San Francisco. I went to AltConf alone, knowing nothing and nobody. The event itself was not as famous as it is today, the talks took place inside a cinema, they had limited space and little infrastructure. It was amazing, I learned a lot and met a lot of interesting people.&lt;/p&gt;

&lt;p&gt;The following year, I went with a friend. He went to WWDC and I went to AltConf. It was in that year that I understood what were the differences between the events, even though I had never participated in WWDC until then.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In those years, I had autonomy and the possibility to use in practice everything I learned in the events&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In 2018, my company sponsored WWDC. I felt the chill in my belly again when I first went to AltConf. I did everything that a first-time dub needs to do: catch queues, wake up early for the keynote and choose all the talks he was interested in advance.
I learned a lot, I met a lot of people (including Tim) and it was totally incredible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2020-03-11-wwdc-or-altconf/me-and-tim.jpeg&quot; alt=&quot;Me and Tim Cook =D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, now I need to put what I learned into practice… But can you put it all into production? Can you use all the news I learned, day by day? Even more, referring to Brazilian users who do not always update at the same speed as Apple products are launched.&lt;/p&gt;

&lt;p&gt;No, unfortunately not. Many of the novelties depend on something. Whether iOS updated, or device or any other reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WWDC is awesome!&lt;/strong&gt; Able to bring some indescribable feeling to be there, see everything I saw on Apple LiveStream and learn all these new technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AltConf is awesome too!&lt;/strong&gt; Able to introduce you to great programming talents, such as the creator of Alamofire or Fastlane. The good thing about Alt’s talks is that the content is more palpable, the speakers show everyday examples, develop frameworks that make the developer’s life easier &lt;strong&gt;for today.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This year, 2019, I’m going to AltConf again. This time the company was unable to sponsor and I am going on my own at Alt. I particularly liked WWDC, because that is my profile.
I have a great friend who was also in both and he prefers AltConf a thousand times. In 2018 he was even one of the invited speakers.&lt;/p&gt;

&lt;p&gt;The question is simple, participate in both. These are incredible events, but each one has a different focus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2020-03-11-wwdc-or-altconf/me-and-my-fellas.JPG&quot; alt=&quot;Have fun with your fellas =D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Never been to any event? Go! You don’t have to go to WWDC (if money and lottery are impediments), just go to AltConf, meet people, feel what it’s like to be with that crowd that week. Worth every penny.&lt;/p&gt;

&lt;h4 id=&quot;ps--join-the-parties-and-have-fun&quot;&gt;PS *: Join the parties and have fun&lt;/h4&gt;

&lt;p&gt;A hug&lt;/p&gt;

&lt;p&gt;Fabrício Masiero&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">How to add UIKit component on your SwiftUI project</title><link href="http://localhost:4000/ios/swiftui/swift/xcode/uikit/uiviewrepresentable/2020/03/09/how-to-add-UIKit-component-on-your-SwiftUI-project/" rel="alternate" type="text/html" title="How to add UIKit component on your SwiftUI project" /><published>2020-03-09T00:00:00-03:00</published><updated>2020-03-09T00:00:00-03:00</updated><id>http://localhost:4000/ios/swiftui/swift/xcode/uikit/uiviewrepresentable/2020/03/09/how-to-add-UIKit-component-on-your-SwiftUI-project</id><content type="html" xml:base="http://localhost:4000/ios/swiftui/swift/xcode/uikit/uiviewrepresentable/2020/03/09/how-to-add-UIKit-component-on-your-SwiftUI-project/">&lt;p&gt;A brief to how to add WKWebView on your SwiftUI view
First of all, there is no WebView component write in SwiftUI, so, how I add this component?&lt;/p&gt;

&lt;p&gt;Yes, we need to add an UIKit component to a SwiftUI view 🤔
Ok, lets build a simple app in SwiftUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2020-03-09-how-to-add-UIKit-component-on-your-SwiftUI-project/create-project.png&quot; alt=&quot;Creating Project on Xcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xcode auto generate a Hello World project, its awesome, because it pretty easy to add WebView now!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2020-03-09-how-to-add-UIKit-component-on-your-SwiftUI-project/initial-project.png&quot; alt=&quot;Initial State&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, finally lets work on some code&lt;/p&gt;

&lt;p&gt;We need to create a ViewModel to treat the webview statement.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Foundation
import WebKit

public class WebViewViewModel: NSObject {
    
    private let stringUrl: String
    public let webView: WKWebView
    
    init(stringUrl: String) {
        self.stringUrl = stringUrl
        self.webView = WKWebView()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We create a ViewModel called &lt;em&gt;WebViewViewModel&lt;/em&gt; with &lt;strong&gt;url&lt;/strong&gt; and &lt;strong&gt;webview&lt;/strong&gt; initializers. But, why?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;url&lt;/strong&gt; — is an string url to you web site e.g google.com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webview&lt;/strong&gt; — is an WKWebView object to store and control your component&lt;/p&gt;

&lt;p&gt;and after this we need to perform a webview request to load the website, so add this on your ViewModel&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public func request() {
    guard let url = URL(string: stringUrl) else {
        return
    }
    let urlRequest = URLRequest(url: url)
    webView.load(urlRequest)
    if webView.navigationDelegate == nil {
        webView.navigationDelegate = self
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And last but not least add WKNavigationDelegate to your ViewModel&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension WebViewViewModel: WKNavigationDelegate {
    public func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
        
    }
    public func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our ViewModel is completed! Now we need to add this webview on our SwiftUI view, back to ContentView class and add this &lt;strong&gt;UIViewRepresentable&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct WebView: UIViewRepresentable {
    
    let viewModel: WebViewViewModel
    
    func makeUIView(context: Context) -&amp;gt; WKWebView {
        return viewModel.webView
    }
    func updateUIView(_ uiView: WKWebView, context: Context) {
        viewModel.request()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But… Whats is &lt;strong&gt;UIViewRepresentable?&lt;/strong&gt; Basically is a instance to create and menage UIKit components, you can read more &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/uiviewrepresentable&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/uiviewrepresentable/3278050-updateuiview&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets understand what that code do.&lt;/p&gt;

&lt;p&gt;The function &lt;strong&gt;makeUIView&lt;/strong&gt; is responsable to return your component.&lt;/p&gt;

&lt;p&gt;The function &lt;strong&gt;updateUIView&lt;/strong&gt; is responsable to tells your app state change.&lt;/p&gt;

&lt;p&gt;Finally, the last thing we need to do is add our webview to our main view, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ContentView: View {
    var body: some View {
        WebView(viewModel: WebViewViewModel(stringUrl: &quot;https://tinyurl.com/w498z2l&quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes, is simple like that!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fabriciomasiero/WebViewSwiftUI/tree/master&quot;&gt;You can download the source code here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed.
Bye bye =D&lt;/p&gt;</content><author><name></name></author><summary type="html">A brief to how to add WKWebView on your SwiftUI view First of all, there is no WebView component write in SwiftUI, so, how I add this component?</summary></entry><entry><title type="html">How to turn your old app into dark theme based on iOS 13?</title><link href="http://localhost:4000/ios/dark%20theme/swift/color/xcode/2019/11/04/how-to-turn-darkmode-ios9/" rel="alternate" type="text/html" title="How to turn your old app into dark theme based on iOS 13?" /><published>2019-11-04T00:00:00-03:00</published><updated>2019-11-04T00:00:00-03:00</updated><id>http://localhost:4000/ios/dark%20theme/swift/color/xcode/2019/11/04/how-to-turn-darkmode-ios9</id><content type="html" xml:base="http://localhost:4000/ios/dark%20theme/swift/color/xcode/2019/11/04/how-to-turn-darkmode-ios9/">&lt;p&gt;My app supports from iOS 9 to the latest released by Apple (13) and I would like it to be dark theme and light theme. It’s possible?
Searching for WWDC articles I noticed that the way Apple does is using&lt;/p&gt;

&lt;h3 id=&quot;colorsassets&quot;&gt;Colors.assets&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PRETTY!&lt;/strong&gt; I created a color asset in the app and started setting it up. But… what I feared came true. Support only for the. iOS 11+. Great Scott!&lt;/p&gt;

&lt;h2 id=&quot;color-document&quot;&gt;Color Document&lt;/h2&gt;
&lt;p&gt;I had to think of other ways to do something sustainable and work.
Starting with creating an extension called&lt;/p&gt;

&lt;h5 id=&quot;colorswift&quot;&gt;Color.swift&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/My-Color-Extension.png&quot; alt=&quot;My Color Extension&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use Color Literal for fuller and more native viewing. All app colors should be there, organized and standardized 👌. Say goodbye to colorWithHex () 😎 💁&lt;/p&gt;

&lt;p&gt;Wonderful, but how would this work as dark mode? Simple, separate the colors that are dark themed and those that are not. For example, Plurall is my app name and purple is its color, it should not necessarily be dark themed.&lt;/p&gt;

&lt;p&gt;The following is an example of colors that contemplate both theme types (can be scaled for more than that 👨‍💻)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/Dark-Themed-Colors.png&quot; alt=&quot;Dark Themed Colors&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;butwhy-thiscolors&quot;&gt;But…Why this Colors?&lt;/h3&gt;

&lt;p&gt;I keep these variables above to the same extent and they are color changeable. The system understands perfectly when to use each one. But where did I get in those dark colors? Why of them?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, I’m not officially a designer, I don’t have this skill but I venture anyway ☺️.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But then, what about the dark colors? I used the Inverted Color technique (here a site that will help you invert the color - &lt;a href=&quot;https://pinetools.com/invert-color&quot;&gt;Invert Colors&lt;/a&gt;), so I can maintain the same contrast and visualization usability that my app had before Dark Mode, using colors that still talk to each other.
And why does Apple use full-black in its native apps? The high-end iPhones (iPhone X, iPhone XS and iPhone 11 Pro) contain OLED screen and black is faithful, these screens can uses less battery in black pixels.&lt;/p&gt;

&lt;p&gt;So, this is how I developed this feature for the app that can work from iOS 9. As seen in the code, it still does not work in the past iOS, this is a decision we still have to talk internally, but it is easy to implement this change .&lt;/p&gt;

&lt;p&gt;I think it’s time to show how the app is doing, right?&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/login-screen-light.png&quot; alt=&quot;Login Screen(Plurall only works on Brazil, sorry)&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/login-screen-dark.png&quot; alt=&quot;Login Screen(Plurall only works on Brazil, sorry)&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Login Screen(Plurall only works on Brazil, sorry)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/menu-light.png&quot; alt=&quot;Side menu, I know, need to update this 😑&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/menu-dark.png&quot; alt=&quot;Side menu, I know, need to update this 😑&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Side menu, I know, need to update this 😑&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/task-light.png&quot; alt=&quot;A Task Workflow(app for students)&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/task-dark.png&quot; alt=&quot;A Task Workflow(app for students)&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A Task Workflow(app for students)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/webkit-light.png&quot; alt=&quot;Works also in WKWebKit 😎&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/webkit-dark.png&quot; alt=&quot;Works also in WKWebKit 😎&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Works also in WKWebKit 😎&lt;/p&gt;

&lt;p&gt;There is only one “bad” side to this whole story, setting the colors manually 😒.&lt;/p&gt;

&lt;p&gt;If you use XIB or Storyboard (like me) it will be more work, but nothing too painful. If you’re one of those who does the whole layout via code, nothing changes for you, champion! Either way you’ll find a lot of it out there!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2019-11-04-how-to-turn-darkmode-ios9/set-colors-programatically.png&quot; alt=&quot;Setting colors programmatically&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;From this, I will talk with the design team and see what changes we can make for a better view, I can see some display failures, not respecting the &lt;strong&gt;21: 1&lt;/strong&gt; or even &lt;strong&gt;4.5: 1&lt;/strong&gt; &lt;strong&gt;contrast&lt;/strong&gt;.
Apart from this visual change, what has changed?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Well, I revisited all the code (it’s an old app, a lot of legacy stuff) and put it in my head: - Don’t refactor complex things, fix force unwraps and other easy-to-maintain silly things.
So, I tweaked all the app colors (which were a mess,), tweaked small errors from XIBs and Storyboards, removed countless classes that weren’t relevant, and again, the app colors are completely organized and visual.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope I have helped everyone looking for this change. 
If you would like to extend the discussion, call me on &lt;a href=&quot;https://twitter.com/fabri_masiero&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;happy-coding&quot;&gt;Happy Coding :)&lt;/h6&gt;</content><author><name></name></author><summary type="html">My app supports from iOS 9 to the latest released by Apple (13) and I would like it to be dark theme and light theme. It’s possible? Searching for WWDC articles I noticed that the way Apple does is using</summary></entry></feed>